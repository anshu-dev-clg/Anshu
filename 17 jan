#include <stdio.h>
#include <stdlib.h>
#define SIZE 10
#define TRUE 1
#define FALSE 0

struct stack //define struct stack
{
char items[SIZE]; //operator stack
int top;
};

void initialise (struct stack *ps){ps->top=-1;} //end initialise
int empty(struct stack *ps){return(ps->top==-1);}//end empty

void push(struct stack *ps,char e)
{
if(ps->top==SIZE-1)
  {
    printf("\n Stack full");
    return;
  }//end if
  ps->items[++(ps->top)]=e;
  return;
}//end push

char pop( struct stack *ps)
{
int e;
e=ps->items[(ps->top)--];
return e;
}//enfd pop

int isoperand(char symb)
{
return(symb>='0' && symb<='9');
}//end isoperand

int precedence(char op1, char op2)
{
if((op1=='*' || op1=='/') && (op2=='*' || op2=='/')) return TRUE;
if((op1=='*' || op1=='/') && (op2=='+' || op2=='-')) return TRUE;
if((op1=='+' || op1=='-') && (op2=='+' || op2=='-')) return TRUE;
if((op1=='+' || op1=='-') && (op2=='*' || op2=='/')) return FALSE;
}//end precedence

void inftopost(char *infix,char *postfix)
{
   int p,outpost=0;
   char symb,topsymb='+';
   struct stack s;
   initialise(&s);

   for(p=0;(symb=infix[p])!='\0';p++)
   {
     if(isoperand(symb))//if symb is an operand
          postfix[outpost++]=symb;//add symb to postfix string
     else//symb is an operator
     {
     while(!empty(&s) && precedence(s.items[s.top],symb))
     {   //stack not empty and
     //topmost element has higher or equal precedence over symb
     topsymb=pop(&s);//pop topmost element from stack
     postfix[outpost++]=topsymb;//add popped element to postfix
     } //end while
     push(&s,symb);//push symb on the stack
     }//end else
   }//end for

   while(!empty(&s))
   {  //pop all remaining operators from the stack and add to postfix
      topsymb=pop(&s);
      postfix[outpost++]=topsymb;
   }//end while

   postfix [outpost]='\0';
   return;
}//end inftopost

int main()
{
    char infix[SIZE],postfix[SIZE];
    int p=0;

    printf("\n Enter the infix expression");
    while((infix[p++]=getchar())!='\n');
    infix[--p]='\0';

    printf("\n The original infix expression is %s",infix);
    inftopost(infix,postfix);
    printf("\n The postfix expression is %s",postfix);

    return 0;
}//end main
